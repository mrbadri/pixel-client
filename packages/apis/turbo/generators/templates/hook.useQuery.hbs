import {
  ApiError,
  ApiResponse,
  UseQueryProps,
  WithParams,
} from "@repo/apis/types/api.types";
import { useQuery } from "@tanstack/react-query";
import {
  {{ method }}{{pascalCase name}},
  {{pascalCase method}}{{pascalCase name}}Props,
  {{pascalCase method}}{{pascalCase name}}ReturnTransformed,
} from "./{{method}}-{{kebabCase name}}";

export type Use{{pascalCase method}}{{pascalCase name}}Props = UseQueryProps<
  ApiResponse<{{pascalCase method}}{{pascalCase name}}ReturnTransformed>,
  WithParams<{{pascalCase method}}{{pascalCase name}}Props>
>;

export const {{ method }}{{pascalCase name}}QueryKey = () => ["{{ method }}{{pascalCase name}}"];

export const Use{{pascalCase method}}{{pascalCase name}} = (props: Use{{pascalCase method}}{{pascalCase name}}Props) => {
  const { params, ...resProps } = props;

  const query = useQuery<ApiResponse<{{pascalCase method}}{{pascalCase name}}ReturnTransformed>, ApiError>({
    queryKey: {{ method }}{{pascalCase name}}QueryKey(),
    queryFn: () => {{ method }}{{pascalCase name}}(params),
    ...resProps,
  });

  return query;
};
