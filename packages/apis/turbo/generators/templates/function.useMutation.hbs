import path from "path";
import { z } from "zod";
import axios from "axios";
import { ApiResponse } from "@repo/apis/types/api.types";
import { requestHandler } from "@repo/apis/utils/request-handler";
import { {{method}}{{pascalCase name }}Schema as schema } from "./{{method}}-{{kebabCase name}}.schema";

export type {{pascalCase method}}{{pascalCase name }}Props = z.infer<typeof schema.request>;

export type {{pascalCase method}}{{pascalCase name }}PropsTransformed = z.infer<
  typeof schema.requestTransformed
>;
export type {{pascalCase method}}{{pascalCase name }}Return = z.infer<typeof schema.response>;

export type {{pascalCase method}}{{pascalCase name }}ReturnTransformed = z.infer<
  typeof schema.responseTransformed
>;

export const {{method}}{{pascalCase name }}URL = () => path.join("/api/{{ path }}");

export const {{method}}{{pascalCase name }} = async (
  props: {{pascalCase method}}{{pascalCase name }}Props,
): Promise<ApiResponse<{{pascalCase method}}{{pascalCase name }}Return>> => {
  const payloadParsed = schema.requestTransformed.parse(props);

  const URL = {{method}}{{pascalCase name }}URL();

  const response = await requestHandler(
    () => axios.{{method}}(URL, payloadParsed),
    schema.response,
  );

  const dataParsed = schema.responseTransformed.parse(response.data);

  return { ...response, data: dataParsed };
};
